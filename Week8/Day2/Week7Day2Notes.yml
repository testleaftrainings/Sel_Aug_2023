Today's Agenda:
  
  1:30 to 2:00 -> Cucumber Introduction
  2:00 to 2:30 -> Feature file
  2:30 to 3:00 -> Breakout
  3:00 to 4:00 -> Step Definition and Runner
  4:00 to 4:15 -> Breakout
  4:15 to 5:15 -> Passing multiple data
  5:15 to 5:30 -> Breakout
  5:30 to 6:30 -> Hooks
  6:30 to 6:45 -> Breakout
  6:45 to 7:00 -> Tags


  Gherkin keywords:  Example: Leaftaps Application
  ==================================================
    
    Feature: Login Functionality of Leaftaps Application
      (describe the functionality of the app)

    Scenario: Login with Positive credentials
      (describes the behaviour/testcase)
     Given Launch the browser
       (represents the precondition)  
     And Load the url
     And Enter the username
     And Enter the password
     When Click on Login Button
       (represents Test condition)
     Then HomePage should be displayed
       (represents the positive expected result)


     But Error message should be displayed
        (represents the negative expected result)  

 Layers in Cucumber:
 =================
    3 layers
      - feature
      - steps
      - runner 

 Steps:
 =====
   1. Create 3 packages under src/test/java
         features
            - Right click features package-> Click New -> Other -> under General folder-> Click File
            - Give name for the file-> Login.feature -> Click Finish
         steps
            - Create StepDefintion class
            - Create methods in the StepDefinition class for each steps in the feature file under Scenario
            - Inside each methods put the real implementation
         runner
            - Inside runner package create a new class called CucumberRunner
            - This user defined class should extends AbstractTestNGCucumberTests
            - On the top of the class use @CucumberOptions 
                - use features attribute -> mention the path of the feature file
                - glue -> mention the package name pf StepDefintion
                - monochrome -> remove the junk / unreadable characters from the console
                - publish -> to get the cucumber report in the console
            - Finally, execute as testng test     

Steps to do Parameterization:
1. Surround the data inside the Scenario with ''
    ex: And Enter the username as 'Demosalesmanager'
2. In the StepDefinition replace the data with {string}                
    ex: @And("Enter the username as {string}")
3. Pass input arguments into the method
      ex: public void enterUsername(String uName) {
		driver.findElement(By.id("username")).sendKeys(uName);

	}
4. Finally, replace all the hardcoded data with the arguments

Exception:
   - DuplicateStepDefinitionException
   - UndefineStepException

Steps:
=====
1. Create CreateLead.feature file
2. Create methods in the Step definition and integrate it
3. In createLead feature file to pass multiple data use Scenario Outline which
   should be followed with examples
4. REplace the hardcoded data with <>   
     ex: Given Enter the companyname as <companyname>
5. In the StepDefinition replace the data with the regular expression
     ex: @Given("Enter the companyname as (.*)$")
6. Pass input arguments into the method adn replaca all the hardcoded data with the arguments
7. In the runner class mention createLead.feature file and execute

InvalidMethodException:
   You're not allowed to extend classes that define Step Definitions or hooks

Hooks:
  -To represent the common precondition and postCondition we have cucumber annotations called hooks
  @Before
    -precondition
  @After
    - postCondition     


Steps to implement hooks:
========================
1. Create BaseClass under steps package
     - declare public static ChromeDriver driver;
2. All StepDefinition should extend BaseClass
3. Create hooks package and create HooksImpl class inside hooks package
    extends BaseClass
4. Inside hooks class create 2 methods
     preCondition() -> annotate with @Before
     postCondition() -> annotate with @After
5. In the runner class within glue attribute mention the hooks package name and execute              
     

tags:
  to categorize the Scenarios in the feature file
          