Today's Agenda:
   
    1:30 to 2:15 -> Advanced User Interactions
    2:15 to 2:30 -> Screenshot
    2:30 to 2:45 -> Breakout
    2:45 to 3:15 -> Explicit wait
    3:15 to 3:30 -> Breakout
    3:30 to 4:00 -> static keyword
    4:00 to 5:00 -> Page Object Model Introduction
    5:00 to 5:15 -> Breakout
    5:15 to 5:45 -> Sequential Execution
    5:45 to 6:30 -> Parallel Execution
    6:30 to 6:45 -> Breakout


   Actions class:
   =============
     moveToElement() -> mousehover action
     dragandDrop() -> drag and drop
     dragandDropBy() -> 
     contextClick() -> RightClick
     doubleClick()  -> DoubleClick
     clickandHold() -> Click and Hold
     scrollToElement() -> Scroll 


   Steps:
   =====
    1. Locate the WebElement where the Interaction has to be performed
       ex: WebElement men = driver.findElement(By.linkText("MEN"));
    2. Intantiate Actions class and pass the driver inside the Constructor
        ex: Actions builder = new Actions(driver); 
    3. Using the object call the required method
        ex: builder.moveToElement(men)
    4. Pass the located WebElement inside the method name
         builder.moveToElement(men)
    5. Finally call perform() to complete the Action which is mandatory.       
   

   Waits:
   =====
     1. Implicit wait
        
     2. Thread.sleep()

   Explicit Wait:
   =============
     - wait for the elements behaviour
       visibilityofEle()
       alertTobePresent()
       stalenessofEle()
       invisibilityofEle()
       textTobePresent()

   FluentWait - Super class
   WebDriverWait - SubClass
   Syntax:
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
    Polling interval - 500 ms
   It will poll for each 500 ms -> If the condition is met -> proceed
   If the condition is not met untill the maximum Duration -> Timeout Exception    

   Classroom:

   1. Load https://www.leafground.com/waits.xhtml


   static:
      1. variables
          - to refer the common data of all objects
            ex: companyname
          - gets the memory only once in the class  
      2. methods
          - belongs to the class rather than the object of the class
          - It can be called without creating an object of the class

      3. block
          - It is used to initialize which has to be executed before main method
          - It is executed before the main method

   static Def:
      It is used for memory management
      The static keyword belongs to the class than an instance of the class
      saves the memory space effectively



Page ObjectModel:
  1. LoginPage
       - enterUsername
       - enterPassword
       - clickLoginButton
   2. WelcomePage
        -clickCRMSFALink
   3. MyHomePage
       - clicLeadsButton
   4. MyLeads
       - clickCreateLead
   5. CreateLeadPage
       - enterCNAme
       - enterFName
       - enterLName
       - clickSubmitButton
   6. ViewLeadsPage
        - Verification
        - clickEditButton    

                       
Steps to implement POM:
PreCondition:
  - Create a new Project and have all the dependencies in the pom.xml and save and then start applying

1. Create 3 packages
     - base
         BaseClass
     - pages
          Classes for each pages
   
     - testcases
         Classes for each testcase    
2. Inside each classes under pages package create methods for each action
     ex: LoginPage
           -enterUsername()
           -enterPassword()
           -clickLoginButton()
3. Inside each method add return statement upon navigation
    - If an action stays in the same page 
         return this
     - If an action navigates to another page
         return new WelcomePage();
4. Create a class under testcases package
     - create a method and annotate with @Test
     - Within the method create an object for LoginPage and call all the methods by using that object    
     - Finally execute         


Steps to do parallel execution:
1. Remove static declaration of driver  in the base class
2. Create parameterized constructor in each pages
       public LoginPage(ChromeDriver driver) {
		this.driver=driver;
	}
3. Create a testng.xml file and run the testcases parallely   


      